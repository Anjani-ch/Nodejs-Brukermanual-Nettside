<%- include('./partials/head.ejs') %>

    <main class="container" id="docs">
        <aside id="docs-aside">
            <nav>
                <ul>
                    <li>
                        <div class="dropdown">
                            <div class="dropdown-head">
                                <p>Installation</p>
                                <img src="/img/chevron-icon.svg" alt="dropdown-icon">
                            </div>

                            <div class="dropdown-content d-none-important">
                                <ul>
                                    <li data-target="win-installation">Windows</li>
                                    <li data-target="mac-installation">Mac</li>
                                    <li data-target="linux-installation">Linux</li>
                                </ul>
                            </div>
                        </div>
                    </li>
                    <li data-target="docs-repl">REPL</li>
                    <li data-target="docs-npm">NPM</li>
                    <li data-target="docs-modules">Modules</li>
                    <li data-target="docs-frameworks">Frameworks</li>
                    <li data-target="docs-template-engines">Template Engines</li>
                </ul>
            </nav>
        </aside>
        
        <section id="docs-content">
            <div id="docs-installation" class="d-none">
                <div id="win-installation">
                    <h1>Windows</h1>

                    <p>1: Downloading the Node.js <span class="fw-bold">.msi</span> installer.</p>

                    <br>

                    <p>The first step to install Node.js on windows is to download the installer. Visit the official Node.js website i.e) <a href="https://nodejs.org/en/download/" target="_blank">https://nodejs.org/en/download/</a> and download the .msi file according to your system environment (32-bit & 64-bit). An MSI installer will be downloaded on your system.</p>

                    <br>

                    <img src="/img/installation/windows/win-step-1.png" alt="win-step-1">

                    <p>2: Running the Node.js installer.</p>

                    <br>

                    <p>Now you need to install the node.js installer on your PC. You need to follow the following steps for the Node.js to be installed.</p>

                    <br>

                    <p>Double click on the .msi installer.</p>

                    <br>

                    <img src="/img/installation/windows/win-step-2-1.png" alt="win-step-2-1">

                    <p>Click “Next”, End-User License Agreement (EULA) will open.</p>
                    <p>Check <span class="fw-bold">I accept the terms in the License Agreement</span>, and select <span class="fw-bold">Next</span></p>

                    <br>

                    <img src="/img/installation/windows/win-step-2-2.png" alt="win-step-2-2">

                    <p>Set the Destination Folder where you want to install Node.js, and select <span class="fw-bold">Next</span></p>

                    <br>

                    <img src="/img/installation/windows/win-step-2-3.png" alt="win-step-2-3">

                    <p>Custom Setup, and select <span class="fw-bold">Next</span></p>

                    <br>

                    <img src="/img/installation/windows/win-step-2-4.png" alt="win-step-2-4">

                    <p>You can now install Node js by selecting <span class="fw-bold">Install</span></p>

                    <br>

                    <img src="/img/installation/windows/win-step-2-5.png" alt="win-step-2-5">

                    <h4 class="fw-bold">NOTE:</h4>
                    <p>A prompt saying - <span class="fw-bold">This step requires administrative privileges</span> will appear.</p>
                    <p>Authenticate the prompt as an <span class="fw-bold">Administrator</span></p>

                    <br>

                    <p>Do not close or cancel the installer until the install is complete</p>
                    <p>Complete Node.js Setup by clicking <span class="fw-bold">Finish</span></p>

                    <br>

                    <img src="/img/installation/windows/win-step-2-6.png" alt="win-step-2-6">

                    <p>3: Verify Node js installation</p>

                    <br>

                    <p>To check that node.js was completely installed on your system or not, you can run the following command in your command prompt or Windows Powershell and test it:</p>

                    <span class="fw-bold">node -v</span>

                    <br>

                    <img src="/img/installation/windows/win-step-2-7.png" alt="win-step-2-7">

                    <p>If node.js was completely installed on your system, the command prompt will print the version of the node.js installed.</p>
                </div>

                <div class="d-none" id="mac-installation">
                    <h1>Mac</h1>

                    <p>1. Download</p>

                    <br>

                    <p>Visit Node js download page <a href="https://nodejs.org/en/download/" target="_blank">here</a></p>
                    <p>Click on macOS Installer to download the latest version of node installable package.</p>

                    <br>

                    <img src="/img/installation/mac/mac-step-1.png" alt="mac-step-1-1">

                    <p>2. Install</p>

                    <br>

                    <p>Click on the download node-vxx.xx.xx.pkg (for example node-v10.15.0.pkg) in previous step to start the installation which brings up below screen. Please click <span class="fw-bold">continue</span></p>

                    <br>

                    <img src="/img/installation/mac/mac-step-2-1.png" alt="mac-step-2-1">

                    <p>By clicking continue in previous step you will be asked to accept license, please click continue</p>

                    <br>

                    <img src="/img/installation/mac/mac-step-2-2.png" alt="mac-step-2-2">

                    <p>Please accept the agreement by clicking <span class="fw-bold">Agree</span></p>

                    <br>

                    <img src="/img/installation/mac/mac-step-2-3.png" alt="mac-step-2-3">

                    <p>Click <span class="fw-bold">continue</span></p>

                    <br>

                    <img src="/img/installation/mac/mac-step-2-4.png" alt="mac-step-2-4">

                    <p>Click <span class="fw-bold">install</span>, which would prompt you for the credentials</p>

                    <br>

                    <img src="/img/installation/mac/mac-step-2-5.png" alt="mac-step-2-5">

                    <br>

                    <p>Provide username and password and click <span class="fw-bold">Install Software</span> </p>

                    <br>

                    <img src="/img/installation/mac/mac-step-2-6.png" alt="mac-step-2-6">

                    <p>On successful installation you will see the below screen which shows the summary of the installation.</p>

                    <br>

                    <img src="/img/installation/mac/mac-step-2-7.png" alt="mac-step-2-7">

                    <p>To access the node and npm executable from terminal make sure <span class="fw-bold">/usr/local/bin</span> is in your $PATH. You can verify that by running <span class="fw-bold">echo</span> $PATH command in terminal</p>

                    <br>

                    <p>3. Testing Installation</p>

                    <br>

                    <p>Open terminal and run below command to test node</p>
                    <p>node -v</p>

                    <br>

                    <img src="/img/installation/mac/mac-step-3.png" alt="mac-step-3">
                </div>

                <div class="d-none" id="linux-installation">
                    <h1>Linux</h1>

                    <h3>Ubuntu, Debian, Mint:</h3>

                    <div class="code-example">
                        <pre>sudo apt install nodejs npm</pre>
                    </div>

                    <br>

                    <h3>CentOS(8 - latest), Fedora, Red Hat(latest):</h3>

                    <div class="code-example">
                        <pre>sudo dnf install nodejs</pre>
                    </div>

                    <br>

                    <h3>CentOS(6, 7, 8), Red Hat(old):</h3>

                    <div class="code-example">
                        <pre>sudo yum install epel-release<br>sudo yum install nodejs</pre>
                    </div>

                    <br>

                    <h3>Arch, Manjaro:</h3>

                    <div class="code-example">
                        <pre>sudo pacman -S nodejs</pre>
                    </div>

                    <br>

                    <p>Run <span class="fw-bold">node -v</span> in terminal to confirm installation success</p>

                    <div class="code-example">
                        <pre>node -v<br>v16.13.1</pre>
                    </div>
                </div>
            </div>

            <div class="d-none" id="docs-repl">
                <h1>REPL</h1>

                <p>REPL stands for Read Evaluate Print Loop, and it is a programming language environment (basically a console window) that takes single expression as user input and returns the result back to the console after execution. The REPL session provides a convenient way to quickly test simple JavaScript code.</p>

                <br>

                <p>If we run the <span class="fw-bold">node</span> command without any script to execute or without any arguments, we start a REPL session:</p>

                <br>

                <div class="code-example">
                    <pre>Node<br>Welcome to Node.js v16.13.1.<br>Type .help for more information<br><img src="/img/chevron-icon.svg" alt="dropdown-icon"></pre>
                </div>

                <br><br>

                <p>The REPL is waiting for us to enter some JavaScript code, to be more precise.</p>

                <div class="code-example">
                    <pre><div class="code-line"><img src="/img/chevron-icon.svg" alt="dropdown-icon"><p>console.log('Hello World')</p></div>test<br>undefined<br><img src="/img/chevron-icon.svg" alt="dropdown-icon"></pre>
                </div>

                <br><br>

                <p>The first value, <span class="fw-bold">test</span>, is the output we told the console to print, then we get <span class="fw-bold">undefined</span> which is the return value of running <span class="fw-bold">console.log()</span>. Node read this line of code, evaluated it, printed the result, and then went back to waiting for more lines of code. Node will loop through these three steps for every piece of code we execute in the REPL until we exit the session. That is where the REPL got its name.</p>

                <br>

                <p>Node automatically prints the result of any line of JavaScript code without the need to instruct it to do so. For example, type in the following line and press enter:</p>

                <div class="code-example">
                    <pre><div class="code-line"><img src="/img/chevron-icon.svg" alt="dropdown-icon"><p>5 === '5'</p></div>false<br><img src="/img/chevron-icon.svg" alt="dropdown-icon"></pre>
                </div>

                <br>

                <p>Note the difference in the outputs of the above two lines. The Node REPL printed <span class="fw-bold">undefined</span> after executed <span class="fw-bold">console.log()</span>, while on the other hand, it just printed the result of <span class="fw-bold">5 === '5'</span>. You need to keep in mind that the former is just a statement in JavaScript, and the latter is an expression.</p>

                <br>

                <p>In some cases, the code you want to test might need multiple lines. For example, say you want to define a function that generates a random number, in the REPL session type in the following line and press enter:</p>

                <div class="code-example">
                    <pre>function generateRandom() {<br>...</pre>
                </div>

                <br>

                <p>The Node REPL is smart enough to determine that you are not done writing your code yet, and it will go into a multi-line mode for you to type in more code. Now finish your function definition and press enter:</p>

                <div class="code-example">
                    <pre>function generateRandom() {<br>...return Math.random()<br>}<br>undefined</pre>
                </div>

                <br>

                <p>Node will get out of the multi-line mode, and print <span class="fw-bold">undefined</span> since there is no value returned. This multi-line mode is limited. Node offers a more featured editor right inside the REPL. We discuss it below under Dot commands.</p>

                <br><br>
            </div>

            <div class="d-none" id="docs-npm">
                <h1>NPM</h1>

                <p><span class="fw-bold">npm</span> is two things: first and foremost, it is an online repository for the publishing of open-source Node.js projects; second, it is a command-line utility for interacting with said repository that aids in package installation, version management, and dependency management. A plethora of Node.js libraries and applications are published on npm, and many more are added every day. These applications can be searched for on <a href="https://www.npmjs.com/" target="_blank">https://www.npmjs.com/</a>. Once you have a package you want to install, it can be installed with a single command-line command.</p>

                <br>

                <p>Let's say you're hard at work one day, developing the Next Great Application. You come across a problem, and you decide that it's time to use that cool library you keep hearing about - let's use Caolan McMahon's async as an example. Thankfully, <span class="fw-bold">npm</span> is very simple to use: you only have to run <span class="fw-bold">npm install async</span>, and the specified module will be installed in the current directory under <span class="fw-bold">./node_modules/</span>. Once installed to your <span class="fw-bold">node_modules</span> folder, you'll be able to use <span class="fw-bold">require()</span> on them just like they were built-ins.</p>

                <br>

                <p>Let's look at an example of a global install - let's say <span class="fw-bold">coffee-script</span>. The npm command is simple: <span class="fw-bold">npm install coffee-script -g</span>. This will typically install the program and put a symlink to it in <span class="fw-bold">/usr/local/bin/</span>. This will then allow you to run the program from the console just like any other CLI tool. In this case, running <span class="fw-bold">coffee</span> will now allow you to use the coffee-script REPL.</p>

                <br>

                <p>Another important use for npm is dependency management. When you have a node project with a package.json file, you can run <span class="fw-bold">npm install</span> from the project root and npm will install all the dependencies listed in the package.json. This makes installing a Node.js project from a git repo much easier! For example, <span class="fw-bold">vows</span>, a Node.js testing framework, can be installed from git, and its single dependency, <span class="fw-bold">eyes</span>, can be automatically handled:</p>

                <br>

                <p>Example:</p>

                <div class="code-example">
                    <pre>git clone https://github.com/cloudhead/vows.git<br>cd vows<br>npm install</pre>
                </div>

                <br>

                <p>After running those commands, you will see a <span class="fw-bold">node_modules</span> folder containing all of the project dependencies specified in the package.json.</p>

                <br><br>
            </div>

            <div class="d-none" id="docs-modules">
                <h1>Modules</h1>

                <p>In the Node.js module system, each file is treated as a separate module. For example, consider a file named <span class="fw-bold">foo.js</span>:</p>

                <div class="code-example">
                    <pre>const circle = require('./circle.js');<br>console.log(`The area of a circle of radius 4 is ${circle.area(4)}`);</pre>
                </div>

                <br>

                <p>On the first line, <span class="fw-bold">foo.js</span> loads the module <span class="fw-bold">circle.js</span> that is in the same directory as <span class="fw-bold">foo.js</span>.</p>

                <br>

                <p>Here are the contents of <span class="fw-bold">circle.js</span>:</p>

                <div class="code-example">
                    <pre>const { PI } = Math;<br><br>exports.area = (r) => PI * r ** 2;<br><br>exports.circumference = (r) => 2 * PI * r;</pre>
                </div>

                <br>

                <p>The module <span class="fw-bold">circle.js</span> has exported the functions <span class="fw-bold">area()</span> and <span class="fw-bold">circumference()</span>. Functions and objects are added to the root of a module by specifying additional properties on the special <span class="fw-bold">exports</span> object.</p>

                <br>

                <p>Variables local to the module will be private, because the module is wrapped in a function by Node.js. In this example, the variable PI is private to <span class="fw-bold">circle.js</span>.</p>

                <br>

                <p>The <span class="fw-bold">module.exports</span> property can be assigned a new value (such as a function or object).</p>

                <br>

                <p>Below, <span class="fw-bold">bar.js</span> makes use of the <span class="fw-bold">square</span> module, which exports a Square class:</p>

                <div class="code-example">
                    <pre>const Square = require('./square.js');<br>const mySquare = new Square(2);<br>console.log(`The area of mySquare is ${mySquare.area()}`);</pre>
                </div>

                <br>

                <p>The <span class="fw-bold">square</span> module is defined in <span class="fw-bold">square.js</span>:</p>

                <div class="code-example">
                    <pre>// Assigning to exports will not modify module, must use module.exports<br>module.exports = class Square {<br>    constructor(width) {<br>         this.width = width;<br>    }<br><br><br>    area() {<br>         return this.width ** 2;<br>    }<br>};</pre>
                </div>

                <br><br>
            </div>

            <div class="d-none" id="docs-frameworks">
                <h1>Frameworks</h1>

                <p>A framework is a collection of various libraries and tools that are required in the development process of a software application. It acts as a base on which different software applications can be developed. A node framework is a workspace platform that supports the use of Node.js and which allows developers to use JavaScript for developing front end as well as the back end of an application. Node frameworks are a wide collection of frameworks built on Node and that extend its properties and functionalities further.</p>

                <br>

                <h4 class="fw-bold">Node.js Frameworks:</h4>
                
                <ul>
                    <li>Express.js</li>
                    <li>AdonisJS</li>
                    <li>MeteorJS</li>
                    <li>NestJS</li>
                    <li>SailsJS</li>
                    <li>Hapi.js</li>
                    <li>Loopback.io</li>
                    <li>Feathers.js</li>
                    <li>MEAN.JS</li>
                    <li>KoaJS</li>
                </ul>

                <br>

                <h4 class="fw-bold">Benefits of Node Framework:</h4>
                
                <ul>
                    <li>Productivity</li>
                    <li>Scalability</li>
                    <li>Speed</li>
                    <li>Same Languages for Front-end and Back-end</li>
                    <li>Maintaining Code standards across a team</li>
                </ul>

                <br><br>
            </div>

            <div id="docs-template-engines">
                <h1>Template Engines</h1>

                <p>Template engine helps us to create an HTML template with minimal code. Also, it can inject data into HTML template at client side and produce the final HTML.</p>

                <br>

                <p>The following figure illustrates how template engine works in Node.js:</p>

                <br><br>

                <img src="/img/template-engines-logic.png" alt="template-engines-logic">

                <br><br>

                <p>As per the above figure, client-side browser loads HTML template, JSON/XML data and template engine library from the server. Template engine produces the final HTML using template and data in client's browser. However, some HTML templates process data and generate final HTML page at server side also.</p>

                <br>

                <p>There are many template engines available for Node.js. Each template engine uses a different language to define HTML template and inject data into it.</p>

                <br>

                <h4 class="fw-bold">Node.js template engines</h4>
                
                <ul>
                    <li>Jade</li>
                    <li>Vash</li>
                    <li>EJS</li>
                    <li>Mustache</li>
                    <li>Dust.js</li>
                    <li>Nunjucks</li>
                    <li>Handlebars</li>
                    <li>atpl</li>
                    <li>haml</li>
                </ul>

                <br>

                <h4 class="fw-bold">Advantages of Template engine in Node.js:</h4>
                
                <ol>
                    <li>Improves developer's productivity.</li>
                    <li>Improves readability and maintainability.</li>
                    <li>Faster performance.</li>
                    <li>Maximizes client side processing.</li>
                    <li>Single template for multiple pages.</li>
                    <li>Templates can be accessed from CDN.</li>
                </ol>

                <br><br>
            </div>
        </section>
    </main>

<%- include('./partials/footer.ejs') %>