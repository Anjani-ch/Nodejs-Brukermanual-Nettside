<div class="d-none" id="docs-repl">
    <h1>REPL</h1>

    <p>REPL stands for Read Evaluate Print Loop, and it is a programming language environment (basically a console window) that takes single expression as user input and returns the result back to the console after execution. The REPL session provides a convenient way to quickly test simple JavaScript code.</p>

    <br>

    <p>If we run the <span class="fw-bold">node</span> command without any script to execute or without any arguments, we start a REPL session:</p>

    <br>

    <div class="code-example">
        <pre>Node<br>Welcome to Node.js v16.13.1.<br>Type .help for more information<br><img src="/img/chevron-icon.svg" alt="dropdown-icon"></pre>
    </div>

    <br><br>

    <p>The REPL is waiting for us to enter some JavaScript code, to be more precise.</p>

    <div class="code-example">
        <pre><div class="code-line"><img src="/img/chevron-icon.svg" alt="dropdown-icon"><p>console.log('Hello World')</p></div>test<br>undefined<br><img src="/img/chevron-icon.svg" alt="dropdown-icon"></pre>
    </div>

    <br><br>

    <p>The first value, <span class="fw-bold">test</span>, is the output we told the console to print, then we get <span class="fw-bold">undefined</span> which is the return value of running <span class="fw-bold">console.log()</span>. Node read this line of code, evaluated it, printed the result, and then went back to waiting for more lines of code. Node will loop through these three steps for every piece of code we execute in the REPL until we exit the session. That is where the REPL got its name.</p>

    <br>

    <p>Node automatically prints the result of any line of JavaScript code without the need to instruct it to do so. For example, type in the following line and press enter:</p>

    <div class="code-example">
        <pre><div class="code-line"><img src="/img/chevron-icon.svg" alt="dropdown-icon"><p>5 === '5'</p></div>false<br><img src="/img/chevron-icon.svg" alt="dropdown-icon"></pre>
    </div>

    <br>

    <p>Note the difference in the outputs of the above two lines. The Node REPL printed <span class="fw-bold">undefined</span> after executed <span class="fw-bold">console.log()</span>, while on the other hand, it just printed the result of <span class="fw-bold">5 === '5'</span>. You need to keep in mind that the former is just a statement in JavaScript, and the latter is an expression.</p>

    <br>

    <p>In some cases, the code you want to test might need multiple lines. For example, say you want to define a function that generates a random number, in the REPL session type in the following line and press enter:</p>

    <div class="code-example">
        <pre>function generateRandom() {<br>...</pre>
    </div>

    <br>

    <p>The Node REPL is smart enough to determine that you are not done writing your code yet, and it will go into a multi-line mode for you to type in more code. Now finish your function definition and press enter:</p>

    <div class="code-example">
        <pre>function generateRandom() {<br>...return Math.random()<br>}<br>undefined</pre>
    </div>

    <br>

    <p>Node will get out of the multi-line mode, and print <span class="fw-bold">undefined</span> since there is no value returned. This multi-line mode is limited. Node offers a more featured editor right inside the REPL. We discuss it below under Dot commands.</p>

    <br><br>
</div>